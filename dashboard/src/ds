return (
	<div className="app-layout">
		<Navbar />
		<div className="content">
			<div className="dashboard">
				{/* Logo Section */}
				<div className="logo-container">
					<img src={logo} alt="Logo" className="logo" />
					<h1 className="app-name">Your App Name</h1> {/* Name below the logo */}
				</div>
				<Routes>
					<Route
						path="/"
						element={
							<HomeWithWebcam
								mode={mode}
								acceptanceRate={acceptanceRate}
								cameraLayout={cameraLayout}
							/>
						}
					/>
					<Route path="/about" element={<About />} />
					<Route
						path="/AnalyticsData"
						element={
							<AnalyticsData
								acceptanceRate={acceptanceRate}
								cameraLayout={cameraLayout}
							/>
						}
					/>
					<Route path="/contact" element={<Contact />} />
					<Route
						path="/settings"
						element={
							<Settings
								setMode={handleModeChange}
								acceptanceRate={acceptanceRate}
								setAcceptanceRate={setAcceptanceRate}
							/>
						/>
					</Route>
				</Routes>
			</div>
			<div className={`webcam-section ${cameraLayout}`}>
				<WebcamCapture mode={mode} cameraLayout={cameraLayout} />
			</div>
		</div>
	</div>
);

/* Navbar Styles */
.navbar {
  padding: 5px 20px;
  color: #fc981e;
  position: relative;
}

.title {
  font-size: 44px;
  text-decoration: none;
  color: #fc981e;
  font-weight: bold;
  margin-left: 20px; /* Space next to the title */

}

.menu {
  cursor: pointer;
  display: flex;
  flex-direction: column;
  margin-top: 50px;
  gap: 5px;
  justify-content: center;
  align-items: center;
  width: 30px;
  height: 30px;
  background-color: transparent;
}

/* Menu selector */
.menu div {
  width: 28px;
  height: 6px;
  
  margin-left: 90px;
  background-color: #fc981e;
  transition: transform 0.3s ease, opacity 0.3s ease;
}

/* Sidebar */
.sidebar {
  position: fixed;
  top: 0;
  left: -280px; /* Slightly move sidebar to the right */
  width: 200px;
  height: 100%;
  background: linear-gradient(135deg, #fc981e, #fc981e);
  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.5);
  transition: left 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  z-index: 9999;
  padding-top: 60px;
  overflow: auto;

  border-top-right-radius:30px;
}

/* When Sidebar is open, slide in and apply shadow */
.sidebar.open {
  left: 0;
  
  border-radius: 10; /* Remove corner curves when open */
}

/* Sidebar list styles */
.sidebar ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.sidebar ul li {
  padding: 15px 20px;
  margin: 10px 0;
  
  border-radius: 8px; /* Rounded corners for each menu item */
  transition: background-color 0.3s ease-in-out, transform 0.2s ease-in-out;
}

/* Hover effect for sidebar items */
.sidebar ul li:hover {
  background-color: #ffcb6b;
  transform: scale(1.05);
  box-shadow: 0px 0px 10px #ffcb6b; /* Glow effect on hover */
}

/* Sidebar item links */
.sidebar ul li a {
  text-decoration: none;
  color: white;
  font-size: 18px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px; /* Space for icon and text */
}

/* Hover effect for links */
.sidebar ul li a:hover {
  text-shadow: 0px 0px 10px rgba(255, 255, 255, 0.8); /* Glow on text hover */
}

/* Icons for list items */
.sidebar ul li a .icon {
  font-size: 20px;
}

/* Close Button for Sidebar */
.sidebar .close-btn {
  position: absolute;
  top: 15px;
  right: 15px;
  font-size: 20px;
  color: white;
  cursor: pointer;
  background: rgba(0, 0, 0, 0.2);
  padding: 5px;
  border-radius: 50%; /* Circular button */
  transition: background 0.3s ease-in-out;
}

.sidebar .close-btn:hover {
  background: rgba(0, 0, 0, 0.5);
}

/* Active and hover effect only on Navbar button items */
.navbar .menu:hover div {
  background-color: #ffcb6b; /* Highlight background color */
  box-shadow: 0px 0px 8px rgba(255, 203, 107, 0.8); /* Glow effect */
}

/* When sidebar is open, change color of active menu item */
.sidebar.open .menu div {
  background-color: #ffcb6b; /* Highlight color */
}



import React, { useEffect, useRef, useState } from 'react';
import Webcam from 'react-webcam';

const WebcamCapture = ({ mode, cameraLayout }) => {
	const [videoDeviceIds, setVideoDeviceIds] = useState([]); // Store video device IDs
	const [permissionsGranted, setPermissionsGranted] = useState(false); // Track permissions
	const webcamRef1 = useRef(null);
	const webcamRef2 = useRef(null);

	const isDemoMode = mode === 'demo'; // Check if in demo mode (only one camera)

	useEffect(() => {
		if (!isDemoMode) {
			const getVideoDevices = async () => {
				const devices = await navigator.mediaDevices.enumerateDevices();
				const videoInputs = devices.filter(device => device.kind === 'videoinput');

				if (videoInputs.length > 0) {
					const constraints = videoInputs.map(device => ({
						deviceId: { exact: device.deviceId },
					}));

					// Request access to both cameras
					try {
						await Promise.all(constraints.map(constraint => navigator.mediaDevices.getUserMedia({ video: constraint })));
						setVideoDeviceIds(videoInputs.map(device => device.deviceId)); // Set IDs for both cameras
						setPermissionsGranted(true); // Set permissions granted
					} catch (error) {
						console.error('Error accessing cameras:', error);
					}
				}
			};

			getVideoDevices();
		}
	}, [isDemoMode]);

	const videoSrc = 'http://localhost:8000/video_feed'; // Video feed from FastAPI

	return (
		<div style={{ display: cameraLayout === 'vertical' ? 'block' : 'flex' }}>
			{isDemoMode ? (
				// In demo mode, show video feed from backend
				<div style={{ width: '100%', margin: '5px' }}>
					<img
						src={videoSrc}
						alt="Video Stream"
						style={{ width: '100%', height: '400px', objectFit: 'cover' }}
						onError={(e) => {
							e.target.onerror = null;
							e.target.src = '';
							console.error('Failed to load video feed from backend.');
						}}
					/>
				</div>
			) : (
				permissionsGranted && videoDeviceIds.length > 0 ? (
					<>
						{/* First camera (always visible) */}
						<div style={{ width: cameraLayout === 'vertical' ? '100%' : '78%', margin: '5px' }}>
						<h3>Left Camera</h3> {/* Left Camera Name */}
							<Webcam
								audio={false}
								ref={webcamRef1}
								screenshotFormat="image/jpeg"
								videoConstraints={{ deviceId: { exact: videoDeviceIds[0] } }}
								style={{ width: '100%', height: '400px' }} // Adjusted to moderate height
							/>
						</div>

						{/* Second camera */}
						{videoDeviceIds[1] && (
							<div style={{ width: cameraLayout === 'vertical' ? '100%' : '78%', margin: '5px' }}>
								<h3>Right Camera</h3> {/* Right Camera Name */}
								<Webcam
									audio={false}
									ref={webcamRef2}
									screenshotFormat="image/jpeg"
									videoConstraints={{ deviceId: { exact: videoDeviceIds[1] } }}
									style={{ width: '100%', height: '400px' }} // Adjusted to moderate height
								/>
							</div>
						)}
					</>
				) : (
					<p>Loading cameras...</p>
				)
			)}
		</div>
	);
};

export default WebcamCapture;

